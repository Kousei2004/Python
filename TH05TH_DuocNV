# # # #Bai1
# # # import numpy as np

# # # # Create vector a with values from 1 to 30
# # # a = np.arange(1, 31)

# # # # Create vector a_le containing odd numbers
# # # a_le = a[a % 2 == 1]

# # # # Create vector a_chan containing even numbers
# # # a_chan = a[a % 2 == 0]

# # # # Create vector a_3 containing numbers divisible by 3
# # # a_3 = a[a % 3 == 0]

# # # # Print results
# # # print("Vector a:", a)
# # # print("\nVector a_le (odd numbers):", a_le)
# # # print("Vector a_chan (even numbers):", a_chan)
# # # print("Vector a_3 (divisible by 3):", a_3)

# # #Bai2.1
# # import numpy as np
# # import matplotlib.pyplot as plt

# # # Đọc dữ liệu chiều cao và cân nặng
# # with open('Data_BMI.txt', 'r') as file:
# #     lines = file.readlines()
# #     height = np.array([float(line.split()[0]) for line in lines]) / 100  # Chuyển cm sang m
# #     weight = np.array([float(line.split()[1]) for line in lines])

# # # Tính chỉ số BMI
# # bmi = weight / (height ** 2)

# # # Định nghĩa các nhóm BMI
# # def lay_nhom_bmi(bmi):
# #     if bmi < 18.5:
# #         return 'Thiếu cân'
# #     elif bmi < 25:
# #         return 'Bình thường'
# #     elif bmi < 30:
# #         return 'Thừa cân'
# #     elif bmi < 35:
# #         return 'Béo phì'
# #     else:
# #         return 'Béo phì nặng'

# # # Đếm số người trong từng nhóm
# # nhom_bmi = ['Thiếu cân', 'Bình thường', 'Thừa cân', 'Béo phì', 'Béo phì nặng']
# # so_nguoi_trong_nhom = {nhom: sum(1 for b in bmi if lay_nhom_bmi(b) == nhom) for nhom in nhom_bmi}

# # # Tạo biểu đồ cột
# # plt.figure(figsize=(10, 6))
# # mau_sac = ['brown', 'pink', 'skyblue', 'gold', 'orangered']
# # plt.bar(nhom_bmi, [so_nguoi_trong_nhom[nhom] for nhom in nhom_bmi], color=mau_sac)
# # plt.title('Phân bố BMI')
# # plt.xlabel('Nhóm BMI')
# # plt.ylabel('Số người')
# # plt.xticks(rotation=45)

# # # Tính toán và hiển thị thống kê
# # print("Thống kê BMI:")
# # print(f"Chỉ số BMI trung bình: {np.mean(bmi):.2f}")
# # print(f"Chỉ số BMI thấp nhất: {np.min(bmi):.2f}")
# # print(f"Chỉ số BMI cao nhất: {np.max(bmi):.2f}")
# # print("\nPhân bố theo nhóm BMI:")
# # for nhom in nhom_bmi:
# #     print(f"{nhom}: {so_nguoi_trong_nhom[nhom]} người ({(so_nguoi_trong_nhom[nhom]/len(bmi)*100):.1f}%)")


# #Bai 2.2
# import numpy as np

# # Tạo vector v_height từ dữ liệu cho sẵn
# v_height = np.array([
#     3.0276, 3.5721, 3.4225, 3.8025, 2.2201, 3.5721, 2.1609, 2.3716, 3.0276, 2.8561,
#     3.8025, 2.5281, 3.6864, 2.4025, 3.6481, 2.3409, 2.4649, 1.96, 2.0736, 2.9584,
#     2.4649, 2.3409, 2.8561, 3.4225, 2.9584, 2.2801, 3.61, 3.4969, 2.6569, 3.2041,
#     2.3409, 2.1684, 2.8025, 2.56, 2.4649, 3.5721, 3.8809, 2.0736, 2.9241, 3.4225,
#     3.0625, 2.2201, 2.4649, 2.5921, 3.3124, 3.4225, 3.5344, 3.2761, 2.5921, 1.96,
#     2.8224, 3.0976, 2.6569, 2.9584, 3.8416, 3.4969, 2.9584, 3.1684, 2.6896, 2.0449,
#     3.6481, 1.9881, 3.7249, 3.61, 3.0625, 3.2041, 2.9584, 2.8224, 2.6896, 3.7636,
#     2.3409, 3.1684, 1.9881, 3.24, 3.4225, 3.8809, 2.7225, 2.8224, 3.0976, 3.2761,
#     2.6896, 2.7556, 3.61, 3.4596, 2.8224, 3.9204, 3.0625, 2.1025, 2.5281, 3.4225,
#     3.1684, 3.3489, 3.7636, 3.1329, 3.8809, 2.89, 2.0164, 2.56, 3.8025, 3.61
# ])

# # Bước 1: Chuyển đổi từ cm sang m (chia cho 100)
# v_height_m = v_height / 100

# # Bước 2: Tính bình phương các phần tử
# v_height_m2 = v_height_m ** 2

# print("Vector v_height_m2 (5 phần tử đầu tiên):", v_height_m2[:5])
# print("\nĐộ dài vector:", len(v_height_m2))
# print("Giá trị trung bình:", np.mean(v_height_m2))
# print("Giá trị nhỏ nhất:", np.min(v_height_m2))
# print("Giá trị lớn nhất:", np.max(v_height_m2))

#Bai 2.3
# import numpy as np

# # Tạo vector v_bmi từ dữ liệu đã cho
# v_bmi = np.array([
#     31.7, 24.4, 32.1, 27.4, 27.5, 29.1, 42.6, 46.8, 29.7, 36.1, 21.3, 31.6, 27.4, 21.2,
#     21.7, 45.7, 44.6, 65.8, 69.9, 47., 44.6, 63.7, 34., 40.6, 22.6, 28.1, 26.3, 17.7,
#     59.8, 47.4, 51.7, 16.4, 17.1, 51.2, 62.1, 37., 29.4, 38.6, 52., 23.7, 39.2, 48.6,
#     22.7, 45.5, 38., 22.2, 34.5, 33.9, 27.8, 77.6, 47.8, 17.4, 41.4, 35.5, 30.2, 25.5,
#     31.1, 40.1, 26., 43., 14.8, 71.9, 14.5, 23., 44.1, 49.3, 32.4, 20.9, 30.5, 36.1,
#     21.8, 36.9, 40.2, 23.1, 29.2, 39.7, 38.2, 31.9, 39.4, 15.6, 27.9, 50.8, 29.1, 34.1,
#     43.6, 12.8, 46., 55.6, 41.1, 40.9, 48.6, 28.7, 29.5, 19.5, 30.7, 54., 34.2, 54.3,
#     18.1, 13.9
# ])

# print("Vector v_bmi:")
# print(v_bmi)

# # In một số thống kê cơ bản
# print("\nThống kê về chỉ số BMI:")
# print(f"Số lượng người: {len(v_bmi)}")
# print(f"Giá trị trung bình: {np.mean(v_bmi):.1f}")
# print(f"Giá trị nhỏ nhất: {np.min(v_bmi):.1f}")
# print(f"Giá trị lớn nhất: {np.max(v_bmi):.1f}")

#Bai2.4
# Định nghĩa dữ liệu BMI
bmi_data = {
    "Thiếu cân": 10,
    "Bình thường": 13,
    "Thừa cân": 16,
    "Béo phì": 14,
    "Béo phì cực độ": 47
}

def thong_ke_bmi():
    print("Thống kê phân bố BMI:")
    print("-" * 40)
    print(f"{'Phân loại':<15} | {'Số người':>10} | {'Tỷ lệ %':>8}")
    print("-" * 40)
    
    tong_so = sum(bmi_data.values())
    
    for loai, so_nguoi in bmi_data.items():
        ty_le = (so_nguoi / tong_so) * 100
        print(f"{loai:<15} | {so_nguoi:>10} | {ty_le:>7.1f}%")
    
    print("-" * 40)
    print(f"Tổng số: {tong_so} người")

def tim_nhom_lon_nhat():
    nhom = max(bmi_data.items(), key=lambda x: x[1])
    print(f"\nNhóm có số người nhiều nhất:")
    print(f"- {nhom[0]}: {nhom[1]} người")

def tim_nhom_nho_nhat():
    nhom = min(bmi_data.items(), key=lambda x: x[1])
    print(f"\nNhóm có số người ít nhất:")
    print(f"- {nhom[0]}: {nhom[1]} người")

# Chạy chương trình
if __name__ == "__main__":
    thong_ke_bmi()
    tim_nhom_lon_nhat()
    tim_nhom_nho_nhat()